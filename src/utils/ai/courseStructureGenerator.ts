import { GoogleGenerativeAI } from '@google/generative-ai';
import type { 
  YouTubePlaylist, 
  GeneratedCourseStructure, 
  CourseModule, 
  CourseLesson,
  CourseCustomization 
} from '@/types/youtube';

// Interfaz para el resultado de Gemini
interface GeminiResponse {
  response: {
    text(): string;
  };
}

// Configuraci√≥n para el generador
const COURSE_GENERATION_CONFIG = {
  maxRetries: 3,
  retryDelay: 2000,
  timeout: 90000,
  model: 'gemini-2.5-flash-lite'
} as const;

// Funci√≥n para extraer JSON de respuesta de LLM con m√∫ltiples patrones
function extractJSON(response: string): GeneratedCourseStructure {
  // Patrones para encontrar JSON en la respuesta
  const patterns = [
    /```json\s*([\s\S]*?)\s*```/,
    /```\s*([\s\S]*?)\s*```/,
    /\{[\s\S]*\}/,
    /"courseStructure"\s*:\s*(\{[\s\S]*\})/
  ];

  for (const pattern of patterns) {
    const match = response.match(pattern);
    if (match) {
      try {
        const jsonStr = match[1] || match[0];
        const parsed = JSON.parse(jsonStr.trim());
        
        // Validar que el objeto tiene la estructura esperada
        if (parsed && typeof parsed === 'object' && 'title' in parsed && 'modules' in parsed) {
          return parsed as GeneratedCourseStructure;
        }
      } catch (error) {
        console.warn(`Patr√≥n ${pattern} no pudo parsear JSON:`, error);
      }
    }
  }

  throw new Error('No se pudo extraer JSON v√°lido de la respuesta');
}

// Funci√≥n para generar estructura de curso usando Gemini
export async function generateCourseStructure(
  playlist: YouTubePlaylist,
  customization?: CourseCustomization
): Promise<GeneratedCourseStructure> {
  const apiKey = process.env.GOOGLE_GENERATIVE_AI_API_KEY;
  
  if (!apiKey) {
    throw new Error('Google Generative AI API key no configurada');
  }

  const genAI = new GoogleGenerativeAI(apiKey);

  // Preparar informaci√≥n de videos para el prompt
  const videosInfo = playlist.videos.map(video => ({
    title: video.title,
    description: video.description,
    duration: video.duration,
    position: video.position
  }));

  // Crear prompt estructurado para generar la estructura del curso
  const prompt = `Eres un experto dise√±ador instruccional. Tu tarea es analizar una playlist de YouTube y crear una estructura de curso educativo completa y bien organizada.

INFORMACI√ìN DE LA PLAYLIST:
- T√≠tulo: ${playlist.title}
- Descripci√≥n: ${playlist.description}
- Canal: ${playlist.channelTitle}
- Cantidad de videos: ${playlist.itemCount}

VIDEOS EN LA PLAYLIST:
${videosInfo.map(video => `
- Posici√≥n ${video.position + 1}: "${video.title}"
  Duraci√≥n: ${video.duration}
  Descripci√≥n: ${video.description.substring(0, 200)}...
`).join('')}

PERSONALIZACI√ìN SOLICITADA:
${customization ? `
- T√≠tulo personalizado: ${customization.title || 'No especificado'}
- Descripci√≥n personalizada: ${customization.description || 'No especificada'}
- Categor√≠a: ${customization.category || 'No especificada'}
- Nivel: ${customization.level || 'No especificado'}
- Instructor: ${customization.instructor || 'No especificado'}
- Audiencia objetivo: ${customization.targetAudience || 'No especificada'}
` : 'Sin personalizaci√≥n espec√≠fica'}

INSTRUCCIONES:
1. Analiza el contenido y tem√°tica de los videos
2. Organiza los videos en m√≥dulos l√≥gicos y coherentes (m√°ximo 6 m√≥dulos)
3. Crea t√≠tulos descriptivos para cada m√≥dulo
4. Asigna cada video a un m√≥dulo como una lecci√≥n
5. Genera objetivos de aprendizaje para cada lecci√≥n
6. Identifica temas clave para cada lecci√≥n
7. Crea una descripci√≥n general del curso
8. Sugiere el nivel de dificultad apropiado
9. Calcula la duraci√≥n total estimada
10. Genera tags relevantes

FORMATO DE RESPUESTA (JSON estricto):
{
  "title": "T√≠tulo del curso basado en el contenido",
  "description": "Descripci√≥n completa del curso (200-300 palabras)",
  "category": "Categor√≠a apropiada",
  "level": "beginner|intermediate|advanced",
  "estimatedDuration": "Duraci√≥n total (ej: 4h 30m)",
  "instructor": "Nombre del instructor",
  "objectives": [
    "Objetivo general 1",
    "Objetivo general 2",
    "Objetivo general 3"
  ],
  "modules": [
    {
      "id": "modulo-1",
      "title": "T√≠tulo del M√≥dulo",
      "description": "Descripci√≥n del m√≥dulo",
      "order": 1,
      "estimatedDuration": "Duraci√≥n del m√≥dulo",
      "lessons": [
        {
          "id": "leccion-1",
          "title": "T√≠tulo de la lecci√≥n",
          "description": "Descripci√≥n de la lecci√≥n",
          "order": 1,
          "youtubeVideoId": "ID_del_video_YouTube",
          "duration": "Duraci√≥n del video",
          "objectives": ["Objetivo espec√≠fico 1", "Objetivo espec√≠fico 2"],
          "keyTopics": ["Tema clave 1", "Tema clave 2"]
        }
      ]
    }
  ],
  "tags": ["tag1", "tag2", "tag3"],
  "prerequisites": ["Prerrequisito 1", "Prerrequisito 2"],
  "targetAudience": "Descripci√≥n de la audiencia objetivo"
}

IMPORTANTE: Responde √öNICAMENTE con el JSON v√°lido, sin texto adicional antes o despu√©s.`;

  console.log('ü§ñ Generando estructura de curso con Gemini...');

  for (let attempt = 1; attempt <= COURSE_GENERATION_CONFIG.maxRetries; attempt++) {
    try {
      const model = genAI.getGenerativeModel({ 
        model: COURSE_GENERATION_CONFIG.model 
      });

      // Generar contenido con timeout
      const generatePromise = model.generateContent(prompt);
      
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Timeout en generaci√≥n')), COURSE_GENERATION_CONFIG.timeout)
      );

      const result = await Promise.race([generatePromise, timeoutPromise]);
      
      // Verificar que el resultado es del tipo esperado y typearlo
      if (!result || typeof result !== 'object' || !('response' in result)) {
        throw new Error('Respuesta inv√°lida del modelo');
      }
      
      const geminiResult = result as GeminiResponse;
      const response = geminiResult.response.text();

      console.log('‚úÖ Respuesta de Gemini recibida, procesando...');

      // Extraer y parsear JSON
      const courseData = extractJSON(response);

      // Validar estructura b√°sica
      if (!courseData.title || !courseData.modules || !Array.isArray(courseData.modules)) {
        throw new Error('Estructura de curso inv√°lida');
      }

      // Mapear videos a lecciones asegurando IDs correctos
      courseData.modules.forEach((module: CourseModule, moduleIndex: number) => {
        module.lessons?.forEach((lesson: CourseLesson, lessonIndex: number) => {
          // Buscar el video correspondiente por posici√≥n o t√≠tulo
          const matchingVideo = playlist.videos.find(video => 
            video.title.toLowerCase().includes(lesson.title.toLowerCase()) ||
            video.position === lessonIndex
          );

          if (matchingVideo) {
            lesson.youtubeVideoId = matchingVideo.id;
            lesson.duration = matchingVideo.duration;
          } else {
            // Fallback: usar el video en la posici√≥n correspondiente
            const videoIndex = moduleIndex * 3 + lessonIndex; // Estimaci√≥n simple
            const fallbackVideo = playlist.videos[videoIndex];
            if (fallbackVideo) {
              lesson.youtubeVideoId = fallbackVideo.id;
              lesson.duration = fallbackVideo.duration;
            }
          }
        });
      });

      console.log('‚úÖ Estructura de curso generada exitosamente');
      return courseData as GeneratedCourseStructure;

    } catch (error: any) { // eslint-disable-line @typescript-eslint/no-explicit-any
      console.warn(`‚ùå Intento ${attempt} fall√≥:`, error.message);
      
      if (attempt === COURSE_GENERATION_CONFIG.maxRetries) {
        console.error('üí• Todos los intentos fallaron, generando estructura de fallback');
        return generateFallbackStructure(playlist, customization);
      }

      // Esperar antes del siguiente intento
      await new Promise(resolve => 
        setTimeout(resolve, COURSE_GENERATION_CONFIG.retryDelay * attempt)
      );
    }
  }

  throw new Error('Error inesperado en la generaci√≥n de estructura');
}

// Funci√≥n de fallback para generar estructura b√°sica cuando falla la IA
function generateFallbackStructure(
  playlist: YouTubePlaylist,
  customization?: CourseCustomization
): GeneratedCourseStructure {
  console.log('üîÑ Generando estructura de fallback...');

  // Dividir videos en m√≥dulos (m√°ximo 6 videos por m√≥dulo)
  const videosPerModule = Math.ceil(playlist.videos.length / Math.min(6, Math.ceil(playlist.videos.length / 6)));
  const modules: CourseModule[] = [];

  for (let i = 0; i < playlist.videos.length; i += videosPerModule) {
    const moduleVideos = playlist.videos.slice(i, i + videosPerModule);
    const moduleNumber = Math.floor(i / videosPerModule) + 1;

    const lessons: CourseLesson[] = moduleVideos.map((video, index) => ({
      id: `leccion-${moduleNumber}-${index + 1}`,
      title: video.title,
      description: video.description || `Lecci√≥n basada en: ${video.title}`,
      order: index + 1,
      youtubeVideoId: video.id,
      duration: video.duration,
      objectives: [`Entender los conceptos de: ${video.title}`],
      keyTopics: [`Tema principal: ${video.title.split(' ').slice(0, 3).join(' ')}`]
    }));

    // Calcular duraci√≥n total del m√≥dulo
    const totalSeconds = moduleVideos.reduce((total, video) => {
      const [minutes, seconds] = video.duration.split(':').map(Number);
      return total + (minutes * 60) + (seconds || 0);
    }, 0);
    
    const moduleHours = Math.floor(totalSeconds / 3600);
    const moduleMinutes = Math.floor((totalSeconds % 3600) / 60);
    const estimatedDuration = moduleHours > 0 
      ? `${moduleHours}h ${moduleMinutes}m`
      : `${moduleMinutes}m`;

    modules.push({
      id: `modulo-${moduleNumber}`,
      title: `M√≥dulo ${moduleNumber}: ${playlist.title.split(' ').slice(0, 3).join(' ')}`,
      description: `M√≥dulo ${moduleNumber} del curso basado en la playlist: ${playlist.title}`,
      order: moduleNumber,
      lessons,
      estimatedDuration
    });
  }

  // Calcular duraci√≥n total del curso
  const totalCourseSeconds = playlist.videos.reduce((total, video) => {
    const [minutes, seconds] = video.duration.split(':').map(Number);
    return total + (minutes * 60) + (seconds || 0);
  }, 0);
  
  const courseHours = Math.floor(totalCourseSeconds / 3600);
  const courseMinutes = Math.floor((totalCourseSeconds % 3600) / 60);
  const totalDuration = courseHours > 0 
    ? `${courseHours}h ${courseMinutes}m`
    : `${courseMinutes}m`;

  return {
    title: customization?.title || playlist.title,
    description: customization?.description || `Curso basado en la playlist "${playlist.title}" del canal ${playlist.channelTitle}. Este curso cubre los temas principales presentados en ${playlist.itemCount} lecciones estructuradas.`,
    category: customization?.category || 'General',
    level: customization?.level || 'intermediate',
    estimatedDuration: totalDuration,
    instructor: customization?.instructor || playlist.channelTitle,
    objectives: customization?.customObjectives || [
      `Dominar los conceptos presentados en ${playlist.title}`,
      'Aplicar los conocimientos adquiridos en proyectos pr√°cticos',
      'Desarrollar habilidades fundamentales en el tema'
    ],
    modules,
    tags: customization?.customTags || ['curso online', 'video tutorial', playlist.channelTitle.toLowerCase()],
    prerequisites: ['Conocimientos b√°sicos en el √°rea', 'Acceso a internet'],
    targetAudience: customization?.targetAudience || 'Estudiantes y profesionales interesados en el tema'
  };
}